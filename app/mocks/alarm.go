// Code generated by MockGen. DO NOT EDIT.
// Source: dao/alarm.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dao "github.com/sblausten/alarm-digester/app/dao"
	models "github.com/sblausten/alarm-digester/app/models"
)

// MockAlarmDaoInterface is a mock of AlarmDaoInterface interface.
type MockAlarmDaoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAlarmDaoInterfaceMockRecorder
}

// MockAlarmDaoInterfaceMockRecorder is the mock recorder for MockAlarmDaoInterface.
type MockAlarmDaoInterfaceMockRecorder struct {
	mock *MockAlarmDaoInterface
}

// NewMockAlarmDaoInterface creates a new mock instance.
func NewMockAlarmDaoInterface(ctrl *gomock.Controller) *MockAlarmDaoInterface {
	mock := &MockAlarmDaoInterface{ctrl: ctrl}
	mock.recorder = &MockAlarmDaoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlarmDaoInterface) EXPECT() *MockAlarmDaoInterfaceMockRecorder {
	return m.recorder
}

// BuildAlarmIndexes mocks base method.
func (m *MockAlarmDaoInterface) BuildAlarmIndexes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BuildAlarmIndexes")
}

// BuildAlarmIndexes indicates an expected call of BuildAlarmIndexes.
func (mr *MockAlarmDaoInterfaceMockRecorder) BuildAlarmIndexes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAlarmIndexes", reflect.TypeOf((*MockAlarmDaoInterface)(nil).BuildAlarmIndexes))
}

// GetActiveAlarms mocks base method.
func (m *MockAlarmDaoInterface) GetActiveAlarms(userId string, from int64) ([]dao.AlarmStatusChangeEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveAlarms", userId, from)
	ret0, _ := ret[0].([]dao.AlarmStatusChangeEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveAlarms indicates an expected call of GetActiveAlarms.
func (mr *MockAlarmDaoInterfaceMockRecorder) GetActiveAlarms(userId, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveAlarms", reflect.TypeOf((*MockAlarmDaoInterface)(nil).GetActiveAlarms), userId, from)
}

// UpsertAlarm mocks base method.
func (m *MockAlarmDaoInterface) UpsertAlarm(alarm models.AlarmStatusChangeMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAlarm", alarm)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertAlarm indicates an expected call of UpsertAlarm.
func (mr *MockAlarmDaoInterfaceMockRecorder) UpsertAlarm(alarm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAlarm", reflect.TypeOf((*MockAlarmDaoInterface)(nil).UpsertAlarm), alarm)
}
