// Code generated by MockGen. DO NOT EDIT.
// Source: src/dao/digest.go

// Package mock_dao is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dao "github.com/sblausten/go-service/dao"
)

// MockDigestDaoInterface is a mock of DigestDaoInterface interface.
type MockDigestDaoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDigestDaoInterfaceMockRecorder
}

// MockDigestDaoInterfaceMockRecorder is the mock recorder for MockDigestDaoInterface.
type MockDigestDaoInterfaceMockRecorder struct {
	mock *MockDigestDaoInterface
}

// NewMockDigestDaoInterface creates a new mock instance.
func NewMockDigestDaoInterface(ctrl *gomock.Controller) *MockDigestDaoInterface {
	mock := &MockDigestDaoInterface{ctrl: ctrl}
	mock.recorder = &MockDigestDaoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDigestDaoInterface) EXPECT() *MockDigestDaoInterfaceMockRecorder {
	return m.recorder
}

// BuildDigestIndexes mocks base method.
func (m *MockDigestDaoInterface) BuildDigestIndexes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BuildDigestIndexes")
}

// BuildDigestIndexes indicates an expected call of BuildDigestIndexes.
func (mr *MockDigestDaoInterfaceMockRecorder) BuildDigestIndexes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildDigestIndexes", reflect.TypeOf((*MockDigestDaoInterface)(nil).BuildDigestIndexes))
}

// GetLastDigest mocks base method.
func (m *MockDigestDaoInterface) GetLastDigest(userId string) (dao.SendAlarmDigest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastDigest", userId)
	ret0, _ := ret[0].(dao.SendAlarmDigest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastDigest indicates an expected call of GetLastDigest.
func (mr *MockDigestDaoInterfaceMockRecorder) GetLastDigest(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastDigest", reflect.TypeOf((*MockDigestDaoInterface)(nil).GetLastDigest), userId)
}

// InsertDigest mocks base method.
func (m *MockDigestDaoInterface) InsertDigest(digest dao.SendAlarmDigest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDigest", digest)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDigest indicates an expected call of InsertDigest.
func (mr *MockDigestDaoInterfaceMockRecorder) InsertDigest(digest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDigest", reflect.TypeOf((*MockDigestDaoInterface)(nil).InsertDigest), digest)
}
